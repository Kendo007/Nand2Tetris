@256
D=A
@SP
M=D
@0
D=A
@SP
D=M-D
@R13
M=D
@Sys.init$ret.0
D=A
@SP
M=M+1
A=M-1
M=D
@Sys.init
D=A
@R14
M=D
@FUNCTION
0;JMP
(FUNCTION)
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@R13
D=M
@ARG
M=D
@SP
D=M
@LCL
M=D
@R14
A=M
0;JMP
(Sys.init$ret.0)
// function Main.fibonacci 0 
(Main.fibonacci)
// push argument 0 
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 2 
@2
D=A
@SP
M=M+1
A=M-1
M=D
// lt  
@SP
AM=M-1
D=M
A=A-1
D=M-D
@SP
A=M-1
M=-1
@CONT0
D;JLT
@SP
A=M-1
M=0
(CONT0)
// if-goto N_LT_2  
@SP
M=M-1
A=M
D=M
@Main.fibonacci$N_LT_2
D;JNE
// goto N_GE_2 
@Main.fibonacci$N_GE_2
0;JMP
// label N_LT_2  
(Main.fibonacci$N_LT_2)
// push argument 0         
@ARG
D=M
@0        
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// return 
@RETURN
0;JMP
(RETURN)
@LCL
D=M
@endframe
M=D
@5
D=A
@endframe
A=M-D
D=M
@retAddr
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@endframe
AM=M-1
D=M
@THAT
M=D
@endframe
AM=M-1
D=M
@THIS
M=D
@endframe
AM=M-1
D=M
@ARG
M=D
@endframe
AM=M-1
D=M
@LCL
M=D
@retAddr
A=M
0;JMP
// label N_GE_2  
(Main.fibonacci$N_GE_2)
// push argument 0 
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 2 
@2
D=A
@SP
M=M+1
A=M-1
M=D
// sub 
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Main.fibonacci 1   
@1
D=A
@SP
D=M-D
@R13
M=D
@Main.fibonacci$ret.1
D=A
@SP
M=M+1
A=M-1
M=D
@Main.fibonacci
D=A
@R14
M=D
@FUNCTION
0;JMP
(Main.fibonacci$ret.1)
// push argument 0 
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 1 
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub 
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Main.fibonacci 1   
@1
D=A
@SP
D=M-D
@R13
M=D
@Main.fibonacci$ret.2
D=A
@SP
M=M+1
A=M-1
M=D
@Main.fibonacci
D=A
@R14
M=D
@FUNCTION
0;JMP
(Main.fibonacci$ret.2)
// add  
@SP
AM=M-1
D=M
A=A-1
M=D+M
// return 
@RETURN
0;JMP
// function Sys.init 0 
(Sys.init)
// push constant 4 
@4
D=A
@SP
M=M+1
A=M-1
M=D
// call Main.fibonacci 1 
@1
D=A
@SP
D=M-D
@R13
M=D
@Sys.init$ret.3
D=A
@SP
M=M+1
A=M-1
M=D
@Main.fibonacci
D=A
@R14
M=D
@FUNCTION
0;JMP
(Sys.init$ret.3)
// label END  
(Sys.init$END)
// goto END  
@Sys.init$END
0;JMP
